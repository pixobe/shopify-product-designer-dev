{% comment %}
  Example: Product Variant Images with JavaScript Integration
  Usage: This shows how to structure variant images in your product template
{% endcomment %}

<!-- Example product variant images section -->
<div class="product-variants">
  {% if product.variants.size > 1 %}
    <div class="variant-images">
      <h3>Available Options:</h3>
      {% for variant in product.variants %}
        {% if variant.featured_image %}
          <div
            class="variant-option"
            data-variant-id="{{ variant.id }}"
            data-variant-available="{{ variant.available }}"
            data-variant-price="{{ variant.price | money_without_currency }}"
          >
            <img
              src="{{ variant.featured_image | image_url: width: 200 }}"
              alt="{{ variant.title | escape }}"
              class="variant-image"
              data-variant-id="{{ variant.id }}"
              style="cursor: pointer; border: 2px solid transparent;"
              onmouseover="this.style.border='2px solid #007ace'"
              onmouseout="this.style.border='2px solid transparent'"
              onclick="selectVariant({{ variant.id }})"
            >

            <div class="variant-info">
              <p class="variant-title">{{ variant.title }}</p>
              <p class="variant-price">{{ variant.price | money }}</p>
              {% unless variant.available %}
                <p class="variant-unavailable">Sold Out</p>
              {% endunless %}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Example variant selector using dropdowns -->
    <div class="variant-selectors">
      {% for option in product.options_with_values %}
        <div class="selector-wrapper">
          <label for="Option{{ forloop.index }}">{{ option.name }}</label>
          <select
            id="Option{{ forloop.index }}"
            name="option{{ forloop.index }}"
            data-option-index="{{ forloop.index }}"
            onchange="updateVariantSelection()"
          >
            {% for value in option.values %}
              <option
                value="{{ value | escape }}"
                {% if option.selected_value == value %}
                  selected
                {% endif %}
              >
                {{ value }}
              </option>
            {% endfor %}
          </select>
        </div>
      {% endfor %}
    </div>

    <!-- Hidden variant ID selector -->
    <select name="id" style="display: none;">
      {% for variant in product.variants %}
        <option
          value="{{ variant.id }}"
          {% if variant == product.selected_or_first_available_variant %}
            selected
          {% endif %}
        >
          {{ variant.title }} - {{ variant.price | money }}
        </option>
      {% endfor %}
    </select>
  {% endif %}
</div>

<script>
  // Function to handle variant selection from images
  function selectVariant(variantId) {
    console.log('Variant selected:', variantId);

    // Update hidden selector
    const variantSelector = document.querySelector('select[name="id"]');
    if (variantSelector) {
      variantSelector.value = variantId;

      // Trigger change event
      variantSelector.dispatchEvent(new Event('change', { bubbles: true }));
    }

    // Update customize button
    const customizeButton = document.querySelector('pixobe-customize-button');
    if (customizeButton && customizeButton.setVariant) {
      customizeButton.setVariant(variantId);
    }

    // Trigger global variant change event
    if (window.triggerVariantChange) {
      window.triggerVariantChange(variantId);
    }

    // Update visual selection
    updateVariantImageSelection(variantId);
  }

  // Function to update variant selection from dropdowns
  function updateVariantSelection() {
    const selectedOptions = [];
    const selectors = document.querySelectorAll('select[data-option-index]');

    selectors.forEach(select => {
      selectedOptions.push(select.value);
    });

    // Find matching variant
    if (window.getVariantByOptions) {
      const variant = window.getVariantByOptions(selectedOptions);
      if (variant) {
        selectVariant(variant.id);
      }
    }
  }

  // Function to update visual selection of variant images
  function updateVariantImageSelection(selectedVariantId) {
    const variantImages = document.querySelectorAll('.variant-image');

    variantImages.forEach(img => {
      const variantId = img.dataset.variantId;
      if (variantId == selectedVariantId) {
        img.style.border = '2px solid #007ace';
        img.style.opacity = '1';
      } else {
        img.style.border = '2px solid transparent';
        img.style.opacity = '0.7';
      }
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Set initial selection
    {% if product.selected_or_first_available_variant %}
      updateVariantImageSelection({{ product.selected_or_first_available_variant.id }});
    {% endif %}
  });
</script>

<style>
  .product-variants {
    margin: 20px 0;
  }

  .variant-images {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 20px;
  }

  .variant-option {
    text-align: center;
    transition: all 0.3s ease;
  }

  .variant-option:hover {
    transform: translateY(-2px);
  }

  .variant-image {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .variant-info {
    margin-top: 8px;
  }

  .variant-title {
    font-size: 14px;
    font-weight: 500;
    margin: 4px 0;
  }

  .variant-price {
    font-size: 14px;
    color: #666;
    margin: 2px 0;
  }

  .variant-unavailable {
    font-size: 12px;
    color: #d32f2f;
    margin: 2px 0;
  }

  .selector-wrapper {
    margin-bottom: 15px;
  }

  .selector-wrapper label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
  }

  .selector-wrapper select {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }
</style>
