{% comment %}
  Variant Selector Helper - Adds click handlers to variant images
  Usage: {% include 'variant_selector_helper' %}
{% endcomment %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Function to setup variant image click handlers
    function setupVariantImageHandlers() {
      // Common selectors for variant images (adjust based on your theme)
      const variantImageSelectors = [
        '.product__media img[data-variant-id]',
        '.product-single__photo img[data-variant-id]',
        '.variant-image[data-variant-id]',
        '[data-variant-image]',
        '.product-form__input input[type="radio"]',
        '.variant-input input[type="radio"]',
      ];

      variantImageSelectors.forEach((selector) => {
        const elements = document.querySelectorAll(selector);
        elements.forEach((element) => {
          element.addEventListener('click', function (event) {
            const variantId = this.dataset.variantId || this.value;
            if (variantId) {
              // Trigger variant change
              if (window.triggerVariantChange) {
                window.triggerVariantChange(variantId);
              }

              // Update URL with variant parameter
              updateUrlWithVariant(variantId);

              // Update customize button
              updateCustomizeButton(variantId);
            }
          });
        });
      });

      // Setup handlers for variant option changes
      setupVariantOptionHandlers();
    }

    // Function to setup variant option handlers (for dropdowns, radio buttons, etc.)
    function setupVariantOptionHandlers() {
      const productForm = document.querySelector('form[action*="/cart/add"]');
      if (!productForm) return;

      // Handle select dropdowns
      const variantSelects = productForm.querySelectorAll('select[data-option-index]');
      variantSelects.forEach((select) => {
        select.addEventListener('change', function () {
          const selectedVariant = findVariantBySelectedOptions();
          if (selectedVariant) {
            if (window.triggerVariantChange) {
              window.triggerVariantChange(selectedVariant.id);
            }
            updateUrlWithVariant(selectedVariant.id);
            updateCustomizeButton(selectedVariant.id);
          }
        });
      });

      // Handle radio buttons
      const variantRadios = productForm.querySelectorAll('input[type="radio"][data-option-index]');
      variantRadios.forEach((radio) => {
        radio.addEventListener('change', function () {
          const selectedVariant = findVariantBySelectedOptions();
          if (selectedVariant) {
            if (window.triggerVariantChange) {
              window.triggerVariantChange(selectedVariant.id);
            }
            updateUrlWithVariant(selectedVariant.id);
            updateCustomizeButton(selectedVariant.id);
          }
        });
      });

      // Handle variant ID selector (hidden input or select)
      const variantIdSelector = productForm.querySelector('select[name="id"], input[name="id"]');
      if (variantIdSelector) {
        variantIdSelector.addEventListener('change', function () {
          const variantId = this.value;
          if (variantId) {
            if (window.triggerVariantChange) {
              window.triggerVariantChange(variantId);
            }
            updateCustomizeButton(variantId);
          }
        });
      }
    }

    // Function to find variant by currently selected options
    function findVariantBySelectedOptions() {
      if (!window.productVariants) return null;

      const productForm = document.querySelector('form[action*="/cart/add"]');
      if (!productForm) return null;

      const selectedOptions = [];

      // Get selected options from selects
      const selects = productForm.querySelectorAll('select[data-option-index]');
      selects.forEach((select) => {
        if (select.value) {
          selectedOptions[parseInt(select.dataset.optionIndex) - 1] = select.value;
        }
      });

      // Get selected options from radio buttons
      const radios = productForm.querySelectorAll('input[type="radio"][data-option-index]:checked');
      radios.forEach((radio) => {
        selectedOptions[parseInt(radio.dataset.optionIndex) - 1] = radio.value;
      });

      // Find matching variant
      return window.productVariants.find((variant) => {
        return variant.options.every((option, index) => option === selectedOptions[index]);
      });
    }

    // Function to update URL with variant parameter
    function updateUrlWithVariant(variantId) {
      if (history.replaceState) {
        const url = new URL(window.location);
        url.searchParams.set('variant', variantId);
        history.replaceState({}, '', url);
      }
    }

    // Function to update customize button with new variant
    function updateCustomizeButton(variantId) {
      const customizeButton = document.querySelector('pixobe-customize-button');
      if (customizeButton && customizeButton.setVariant) {
        customizeButton.setVariant(variantId);
      }
    }

    // Initialize the handlers
    setupVariantImageHandlers();

    // Setup MutationObserver to handle dynamically added elements
    const observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          setupVariantImageHandlers();
        }
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });
  });
</script>
